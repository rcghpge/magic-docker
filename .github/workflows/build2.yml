name: Build 2

on:
  push:
    branches:
      - main
  pull_request:

env:
  DEFAULT_BASE_IMAGE: ubuntu:noble

jobs:
  version:
    name: Check if version changed
    runs-on: ubuntu-latest
    outputs:
      push: ${{ steps.push.outputs.push }}
      version-changed: ${{ steps.version-metadata.outputs.changed }}
      new-version: ${{ steps.version-metadata.outputs.newVersion }}
    steps:
      - uses: actions/checkout@v4
      - uses: Quantco/ui-actions/version-metadata@v1
        id: version-metadata
        with:
          file: Dockerfile
          token: ${{ secrets.GITHUB_TOKEN }}
          version-extraction-override: "regex:ARG MAGIC_VERSION=(.*)"
      - name: Determine if pushing images
        id: push
        run: echo "push=${{ steps.version-metadata.outputs.changed == 'true' && github.event_name == 'push' && github.ref_name == 'main' }}" >> $GITHUB_ENV

  build:
    needs: version
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        base-image:
          - ubuntu:noble # 24.04
          - ubuntu:jammy # 22.04
          - ubuntu:focal # 20.04
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
      - name: Set image variables
        id: image-variables
        env:
          IMAGE: ${{ matrix.base-image }}
        run: |
          base_image="${{ matrix.base-image }}"
          tag="${base_image##*:}"
          platforms="linux/amd64,linux/arm64"
          is_default="false"
          if [ "$base_image" = "${{ env.DEFAULT_BASE_IMAGE }}" ]; then
            is_default="true"
          fi
          echo "tag=$tag" >> $GITHUB_ENV
          echo "platforms=$platforms" >> $GITHUB_ENV
          echo "is_default=$is_default" >> $GITHUB_ENV
        shell: bash
      - name: Get docker metadata
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/modular/magic
          tags: |
            type=raw,value=latest,priority=1000,enable=${{ env.is_default }}
            type=raw,value=${{ env.tag }},priority=900
            type=semver,pattern={{version}},enable=${{ env.is_default }},value=${{ needs.version.outputs.new-version }},priority=800
            type=semver,pattern={{version}}-${{ env.tag }},value=${{ needs.version.outputs.new-version }},priority=500
      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Docker images
        id: build
        uses: docker/build-push-action@v5
        with:
          platforms: ${{ env.platforms }}
          push: ${{ needs.version.outputs.push == 'true' }}
          build-args: BASE_IMAGE=${{ matrix.base-image }}
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.tag }}
          path: ${{ steps.metadata.outputs.bake-file }}
      - name: Run tests
        if: needs.version.outputs.push == 'true'
        run: |
          docker images
          docker run --rm ghcr.io/modular/magic:${{ needs.version.outputs.new-version }}-${{ env.tag }} magic --version
          docker run --rm ghcr.io/modular/magic:${{ needs.version.outputs.new-version }}-${{ env.tag }} sh -c "mkdir /app && cd /app && magic init && magic add python && magic run python --version"
      - name: Image digest
        run: echo ${{ steps.build.outputs.digest }}

  release:
    needs: [version, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.version.outputs.push == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Push ${{ needs.version.outputs.new-version }} tag
        run: |
          git tag ${{ needs.version.outputs.new-version }}
          git push origin ${{ needs.version.outputs.new-version }}
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          tag_name: ${{ needs.version.outputs.new-version }}
